{
  "cells": [
    {
      "outputs": [],
      "languageId": "go",
      "id": "0",
      "value": "// Package gomerr provides an enhanced error framework that captures errors,\n// error attributes, stack traces, and more. It includes a \"pretty-print\"\n// mechanism, and can be used by renderers to produce content suitable for\n// distribution across process boundaries (i.e. as part of an API error\n// response).\n//\n// The package defines an interface, `Gomerr`, that extends the Error,\n// interface, includes the the `Is(err Error)` and `Unwrap()` functions, and\n// provides other generally useful functions. The gomerr package also\n// includes a base implementation, `*gomerr`, and a builder function that\n// can be used to build specific Gomerr implementation types. Let's take\n// ConfigurationError as an example:\n//\n//   type BooBooError struct {\n//     Gomerr\n//     Ouchie string\n//   }\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 0
      }
    },
    {
      "outputs": [],
      "languageId": "go",
      "id": "1",
      "value": "//\n//   func BooBoo(ouchie string) *BooBooError {\n//     return Build(new(BooBooError), ouchie).(*BooBooError)\n//   }\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 17
      }
    },
    {
      "outputs": [],
      "languageId": "go",
      "id": "2",
      "value": "//\n//\n\npackage gomerr\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 21
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./gomerr/doc.go"
  }
}